//Time Conversion
public static String timeConversion(String s) {
        String quan = s.substring(8,s.length());
        String time = s.substring(0,8);
        String hour = s.substring(0,2);
        int hourInt = Integer.valueOf(hour);
        if(quan.equals("AM")) {
            if(hourInt == 12) {
                return "00" + s.substring(2,s.length() - 2);
            }
            else {
                return time;
            }
        }
        else {
            if(hourInt != 12) {
                hourInt += 12;
                return "" + hourInt + s.substring(2,s.length() - 2);
            }
            else {
                return time;
            }
            
            
        }
        
        
    }


// Min max sum
def miniMaxSum(arr):
    arr.sort()
    lowSum = 0
    highSum = 0
    for idx in range(0, len(arr) - 1):
        lowSum += arr[idx]
    for idx in range(1, len(arr)):
        highSum += arr[idx]
    
    print(lowSum, highSum)



//Plus Minus
public static void plusMinus(List<Integer> arr) {
    Double total = 0.0;
    Double neg = 0.0;
    Double pos = 0.0;
    Double zero = 0.0;
    
    for(int i = 0; i < arr.size(); i++) {
        total++;
        if(arr.get(i) < 0) {
            neg++;
        } else if(arr.get(i) > 0) {
            pos++;
        } else {
            zero++;
        }
        
        
    }  
    System.out.printf("%.6f\n", pos/total);
    System.out.printf("%.6f\n", neg/total);
    System.out.printf("%.6f\n", zero/total);
  
}


//Breaking the Records
public static List<Integer> breakingRecords(List<Integer> scores) {
    int min = scores.get(0);
    int max = scores.get(0);
    List<Integer> results = new ArrayList<Integer>();
    results.add(0);
    results.add(0);
    for(int i = 0; i < scores.size(); i++) {
        if(scores.get(i) > max) {
            max = scores.get(i);
            results.set(0, results.get(0) + 1);
        }
        else if(scores.get(i) < min) {
            min = scores.get(i);
            results.set(1, results.get(1) + 1);
        }
    }
    return results;

}

//Camel Case 4
public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        while(scan.hasNextLine()) {
            String line = scan.nextLine();
            if(line == "\n") continue;
            String operation = line.substring(0,1);
            String type = line.substring(2,3);
            String rest = line.substring(4);
            
            //Split
            if(operation.equals("S")) {
                if(type.equals("M")) {
                    System.out.println(removeCapitals(rest.substring(0, rest.length() - 2)));
                } else if(type.equals("V")) {
                    System.out.println(removeCapitals(rest));
                } else if(type.equals("C")) {
                    System.out.println(removeCapitals(rest));
                }
            }
            //Combine
            else if(operation.equals("C")) {
                if(type.equals("M")) {
                    System.out.println(combineMeth(rest));
                } else if(type.equals("V")) {
                    System.out.println(combineVar(rest));
                } else if(type.equals("C")) {
                    System.out.println(combineClass(rest));
                }
            }
            
        }
        scan.close();
    }
    
    public static String removeCapitals(String input) {

        char[] chars = input.toCharArray();
        String rtn = "";
        for(int i = 0; i < chars.length; i++) {
            
            if(i == 0 && Character.isUpperCase(chars[i])) {
                chars[i] = Character.toLowerCase(chars[i]);
            }
            else if(i > 0 && Character.isUpperCase(chars[i])) {
                chars[i] = Character.toLowerCase(chars[i]);
                rtn += " ";
            }
            rtn += (chars[i]);
            
        }
        
        return rtn;
    }
    
    public static String combineVar(String input) {
        char[] chars = input.toCharArray();
        String rtn = "";
        rtn += chars[0];
        for(int i = 1; i < chars.length; i++) {
            if(chars[i] == ' ') {
                chars[i + 1] = Character.toUpperCase(chars[i+1]);
                continue;
            }
            rtn += (chars[i]);
        }
        return rtn;
    }
    public static String combineMeth(String input) {
        char[] chars = input.toCharArray();
        String rtn = "";
        rtn += chars[0];
        for(int i = 1; i < chars.length; i++) {
            if(chars[i] == ' ') {
                chars[i + 1] = Character.toUpperCase(chars[i+1]);
                continue;
            }
            rtn += (chars[i]);
        }
        rtn += "()";
        return rtn;
    }
    public static String combineClass(String input) {
        char[] chars = input.toCharArray();
        String rtn = "";
        rtn += Character.toUpperCase(chars[0]);
        for(int i = 1; i < chars.length; i++) {
            if(chars[i] == ' ') {
                chars[i + 1] = Character.toUpperCase(chars[i+1]);
                continue;
            }
            rtn += (chars[i]);
        }
        return rtn;
    }
    
    
    
}